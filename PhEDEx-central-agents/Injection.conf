%Lifecycle::Lite = (
  Name		=> 'ANSE Lifecycle', # don't worry about this...

  Quiet		=> 0,
  Verbose	=> 0,
  Debug		=> 0,

  Jitter	=>  0.1,
  CycleSpeedup	=>    1,
  Suspend       =>    0,
  NJobs         =>    8,

  TmpDir	=>  '/data/' . (getpwuid($<))[0] . '/tmp/',
  GarbageCycle  =>  300,
  GarbageAge    => 3600,
  StatsFrequency => 3600 * 12,

  CycleTime     => 600,
  NCycles       => -1, # < 0 => infinite, > 0 to limit

  KeepInputs    => 0,
  KeepOutputs   => 0,
  KeepLogs      => 0,
  KeepFailedInputs  => 1,
  KeepFailedOutputs => 1,
  KeepFailedLogs    => 1,

  FileSizeMean	 => 2.0, # GB
  FileSizeStdDev => 0.2, # GB

  Templates => {
    'RAW' => {
      CycleTime		=> 999_999_999,
      Events		=> [ 'makeDataset', 'makeBlocks', 'makeFiles', 'Inject', 'addData', ],
      Intervals			=> {
	Inject			=>    0,
        addData			=>   60,
      },
    },
    CheckProxy => {
      Incarnations =>   1,
      NCycles	   =>   1,
      GracePeriod  => 600,
    },
    Auth => {
      Incarnations => 1,
      NCycles      => 1,
    },
  },

  Defaults => {
#   Use the Datasvc module to perform the actions, instead of calling the code directly.
    Namespace	=> 'PHEDEX::Testbed::Lifecycle',
    Module => {
      Auth        => 'Datasvc',
      Inject      => 'Datasvc',
      makeDataset => 'DataProvider',
      makeBlocks  => 'DataProvider',
      makeFiles   => 'DataProvider',
      addData     => 'DataProvider',
    },
    DataProvider => {
      addData  => {
        addEvents => [ 'addData', ],
      },
    },
    Datasvc	=> {

# Choose one or other pair here, but do _not_ choose the prod instance with phedex-web-dev!
#      url      => 'https://brazil.accre.vanderbilt.edu:4443/phedex/datasvc',
#      instance => 'prod',
      url      => 'https://phedex-web-dev.cern.ch/phedex/datasvc',
      instance => 'tbedii',

#      Set up your proxy by running 'voms-proxy-init --voms cms --valid 192:00'
       cert_file => $ENV{X509_USER_PROXY} || "/tmp/x509up_u$<",
       key_file	 => $ENV{X509_USER_PROXY} || "/tmp/x509up_u$<",
       ca_file	 => $ENV{X509_USER_PROXY} || "/tmp/x509up_u$<",
       ca_dir	 => $ENV{X509_CERT_DIR}   || '/afs/cern.ch/project/gd/LCG-share2/certificates',
    },
    Exec => {
      'CheckProxy'	=> 'CheckProxy.pl',
    },
  },

  Workflows => [
    {
      Name			=> 'Raw data',
      Template			=> 'RAW',
      Suspend			=> 0,

      InjectionSite		=>    'T2_Test1_Buffer',

# 4 injections per block & 250 blocks per dataset gives:
# 250K files per dataset
# 500 TB per dataset
#   2 TB per block
      InjectionsPerBlock	=>         4,
      BlocksPerDataset		=>	 250,
      DropClosedBlocks		=>	   1,

#      T2Subscribe	=> {
#        Nodes       => 'T2_Test2_Buffer',
#      },

#     Initial parameters for the generator
      Dataset	=> '/data/fakeData-01-%04x/RAW',
      Datasets	=>   100,
      Blocks	=>     1,
      Files	=>   250,

      AutoRestart => 1,

      DBS	=> 'http://cmsdoc.cern.ch/cms/aprom/DBS/CGIServer/query',
    },
    { Name => 'CheckProxy', },
    { Name => 'Auth', },
  ],
);

do "$ENV{LIFECYCLE}/LifecycleNodes.pl";
do "$ENV{LIFECYCLE}/LifecycleGroups.pl";

1;
